plugins {
    id 'java'
    id 'io.github.goooler.shadow' version "8.1.7"
}

group = 'dev.unnm3d'
version = '4.5.5'

repositories {
    mavenCentral()
    maven {
        url 'https://jitpack.io'
    }
    maven {
        url 'https://repo.papermc.io/repository/maven-public/'
    }
    maven {
        url 'https://repo.extendedclip.com/content/repositories/placeholderapi/'
    }
    maven {
        url 'https://repo.essentialsx.net/releases/'
    }
}

dependencies {
    compileOnly 'io.papermc.paper:paper-api:1.17-R0.1-SNAPSHOT'
    compileOnly 'org.projectlombok:lombok:1.18.38'
    compileOnly 'net.kyori:adventure-text-minimessage:4.23.0'
    implementation 'net.kyori:adventure-platform-bukkit:4.4.1'
    compileOnly 'io.lettuce:lettuce-core:6.7.1.RELEASE' exclude group: 'io.netty'
    implementation 'de.exlll:configlib-yaml:4.6.1'
    implementation 'com.github.Anon8281:UniversalScheduler:0.1.6'

    compileOnly 'com.github.MilkBowl:VaultAPI:1.7.1'
    compileOnly 'me.clip:placeholderapi:2.11.6'
    compileOnly 'net.essentialsx:EssentialsX:2.21.0'
    compileOnly 'com.github.Zrips:CMI-API:9.7.14.3'
    compileOnly(files('libs/XConomy-Bukkit-2.26.3.jar'))

    compileOnly 'com.github.brcdev-minecraft:shopgui-api:3.1.0'

    annotationProcessor 'org.projectlombok:lombok:1.18.38'
}

shadowJar {
    dependencies{
        exclude(dependency('net.kyori:adventure-platform-viaversion'))
        exclude(dependency('net.kyori:adventure-text-minimessage'))
        exclude(dependency('net.kyori:adventure-text-serializer-legacy'))
        exclude(dependency('net.kyori:adventure-text-serializer-json'))
        exclude(dependency('net.kyori:adventure-text-serializer-json-legacy-impl'))
        exclude(dependency('net.kyori:adventure-text-serializer-gson'))
        exclude(dependency('net.kyori:adventure-text-serializer-bungeecord'))
        exclude(dependency('net.kyori:adventure-api'))
        exclude(dependency('net.kyori:adventure-nbt'))
        exclude(dependency('net.kyori:adventure-key'))
        exclude(dependency('net.kyori:option'))
        exclude(dependency('net.kyori:examination-api'))
    }

    destinationDirectory.set(file("$rootDir/target"))
    archiveClassifier.set('')

    relocate 'net.kyori.adventure.platform', 'dev.unnm3d.shaded.kyori.adventure.platform'
    relocate 'de.exlll.configlib', 'dev.unnm3d.shaded.configlib'
    relocate 'org.snakeyaml.engine', 'dev.unnm3d.shaded.snakeyaml'
    relocate 'com.github.Anon8281.universalScheduler', 'dev.unnm3d.shaded.universalScheduler'
    minimize()
}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
    filesMatching('source') {
        expand props
    }
}

